#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  mayhem/exploit/windows.py
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import ctypes
import platform

from mayhem.proc.windows import process_is_wow64
from mayhem.proc.windows import WindowsProcess
from mayhem.utilities import align_up

class WindowsX86Syscall(object):
	__syscall_stub = b'\x8b\x44\x24\x04'       # mov    eax,DWORD PTR [esp+0x4]
	__syscall_stub += b'\x83\xc4\x08'          # add    esp,0x8
	__syscall_stub += b'\xba\x00\x03\xfe\x7f'  # mov    edx,0x7ffe0300
	__syscall_stub += b'\xff\x12'              # call   DWORD PTR [edx]
	__syscall_stub += b'\x83\xec\x08'          # sub    esp,0x8
	__syscall_stub += b'\xc3'                  # ret
	__syscall_prototype = ctypes.CFUNCTYPE(ctypes.c_ulong)
	def __init__(self, syscall_map=None):
		self.syscall_map = syscall_map
		process_h = WindowsProcess(pid=-1)
		shellcode_sz = align_up(len(self.__syscall_stub), 1024)
		self.address = process_h.allocate(size=shellcode_sz)
		process_h.write_memory(self.address, self.__syscall_stub)
		process_h.protect(self.address, size=shellcode_sz, permissions='PAGE_EXECUTE_READ')
		self._syscall = self.__syscall_prototype(self.address)

	def __call__(self, syscall_number, *args):
		return self._syscall(syscall_number, *args)

	def __getattr__(self, syscall_name):
		if not self.syscall_map:
			raise AttributeError('no syscall map is available')
		if not syscall_name in self.syscall_map:
			raise AttributeError("unknown syscall name: '{0}'".format(syscall_name))
		syscall_number = self.syscall_map[syscall_name]
		return lambda *args: self._syscall(syscall_number, *args)

def find_driver_base(driver=None):
	"""
	Get the base address of the specified driver or the NT Kernel if none is
	specified.

	:param str driver: The name of the driver to get the base address of.
	:return: The base address and the driver name.
	:rtype: tuple
	"""
	if platform.architecture()[0] == '64bit':
		lpImageBase = (ctypes.c_ulonglong * 1024)()
		lpcbNeeded = ctypes.c_longlong()
		ctypes.windll.psapi.GetDeviceDriverBaseNameA.argtypes = [ctypes.c_longlong, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32]
	else:
		if process_is_wow64():
			raise RuntimeError('python running in WOW64 is not supported')
		lpImageBase = (ctypes.c_ulong * 1024)()
		lpcbNeeded = ctypes.c_long()
	driver_name_size = ctypes.c_long()
	driver_name_size.value = 48
	ctypes.windll.psapi.EnumDeviceDrivers(ctypes.byref(lpImageBase), ctypes.c_int(1024), ctypes.byref(lpcbNeeded))
	for base_addr in lpImageBase:
		driver_name = ctypes.c_char_p('\x00' * driver_name_size.value)
		if base_addr:
			ctypes.windll.psapi.GetDeviceDriverBaseNameA(base_addr, driver_name, driver_name_size.value)
			if driver == None and driver_name.value.lower().find("krnl") != -1:
				return (base_addr, driver_name.value)
			elif driver_name.value.lower() == driver:
				return (base_addr, driver_name.value)
	return None

def get_haldispatchtable():
	"""
	Get the address of the halDispatchTable.

	:return: The address of the halDispatchTable.
	:rtype: int
	"""
	if platform.architecture()[0] == '64bit':
		ctypes.windll.kernel32.LoadLibraryExA.restype = ctypes.c_uint64
		ctypes.windll.kernel32.GetProcAddress.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_char)]
		ctypes.windll.kernel32.GetProcAddress.restype = ctypes.c_uint64
	elif process_is_wow64():
		raise RuntimeError('python running in WOW64 is not supported')
	(krnlbase, kernelver) = find_driver_base()
	hKernel = ctypes.windll.kernel32.LoadLibraryExA(kernelver, 0, 1)
	halDispatchTable = ctypes.windll.kernel32.GetProcAddress(hKernel, 'HalDispatchTable')
	halDispatchTable -= hKernel
	halDispatchTable += krnlbase
	return halDispatchTable
